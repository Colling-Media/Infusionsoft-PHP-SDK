<?php
/**
 * InlineResponse2002Sequences
 *
 * PHP version 5
 *
 * @category Class
 * @package  CollingMedia\Infusionsoft
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Infusionsoft
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: V1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace CollingMedia\Infusionsoft\Model;

use \ArrayAccess;

/**
 * InlineResponse2002Sequences Class Doc Comment
 *
 * @category    Class
 * @package     CollingMedia\Infusionsoft
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class InlineResponse2002Sequences implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'inline_response_200_2_sequences';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'active_contact_count' => 'int',
        'active_contact_count_completed' => 'int',
        'historical_contact_count' => '\CollingMedia\Infusionsoft\Model\InlineResponse2002HistoricalContactCounts',
        'id' => 'int',
        'name' => 'string',
        'paths' => '\CollingMedia\Infusionsoft\Model\InlineResponse2002Paths[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerFormats = [
        'active_contact_count' => 'int32',
        'active_contact_count_completed' => 'int32',
        'historical_contact_count' => null,
        'id' => 'int64',
        'name' => null,
        'paths' => null
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'active_contact_count' => 'active_contact_count',
        'active_contact_count_completed' => 'active_contact_count_completed',
        'historical_contact_count' => 'historical_contact_count',
        'id' => 'id',
        'name' => 'name',
        'paths' => 'paths'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'active_contact_count' => 'setActiveContactCount',
        'active_contact_count_completed' => 'setActiveContactCountCompleted',
        'historical_contact_count' => 'setHistoricalContactCount',
        'id' => 'setId',
        'name' => 'setName',
        'paths' => 'setPaths'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'active_contact_count' => 'getActiveContactCount',
        'active_contact_count_completed' => 'getActiveContactCountCompleted',
        'historical_contact_count' => 'getHistoricalContactCount',
        'id' => 'getId',
        'name' => 'getName',
        'paths' => 'getPaths'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['active_contact_count'] = isset($data['active_contact_count']) ? $data['active_contact_count'] : null;
        $this->container['active_contact_count_completed'] = isset($data['active_contact_count_completed']) ? $data['active_contact_count_completed'] : null;
        $this->container['historical_contact_count'] = isset($data['historical_contact_count']) ? $data['historical_contact_count'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['paths'] = isset($data['paths']) ? $data['paths'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets active_contact_count
     * @return int
     */
    public function getActiveContactCount()
    {
        return $this->container['active_contact_count'];
    }

    /**
     * Sets active_contact_count
     * @param int $active_contact_count
     * @return $this
     */
    public function setActiveContactCount($active_contact_count)
    {
        $this->container['active_contact_count'] = $active_contact_count;

        return $this;
    }

    /**
     * Gets active_contact_count_completed
     * @return int
     */
    public function getActiveContactCountCompleted()
    {
        return $this->container['active_contact_count_completed'];
    }

    /**
     * Sets active_contact_count_completed
     * @param int $active_contact_count_completed
     * @return $this
     */
    public function setActiveContactCountCompleted($active_contact_count_completed)
    {
        $this->container['active_contact_count_completed'] = $active_contact_count_completed;

        return $this;
    }

    /**
     * Gets historical_contact_count
     * @return \CollingMedia\Infusionsoft\Model\InlineResponse2002HistoricalContactCounts
     */
    public function getHistoricalContactCount()
    {
        return $this->container['historical_contact_count'];
    }

    /**
     * Sets historical_contact_count
     * @param \CollingMedia\Infusionsoft\Model\InlineResponse2002HistoricalContactCounts $historical_contact_count
     * @return $this
     */
    public function setHistoricalContactCount($historical_contact_count)
    {
        $this->container['historical_contact_count'] = $historical_contact_count;

        return $this;
    }

    /**
     * Gets id
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     * @param int $id
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets name
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     * @param string $name
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets paths
     * @return \CollingMedia\Infusionsoft\Model\InlineResponse2002Paths[]
     */
    public function getPaths()
    {
        return $this->container['paths'];
    }

    /**
     * Sets paths
     * @param \CollingMedia\Infusionsoft\Model\InlineResponse2002Paths[] $paths
     * @return $this
     */
    public function setPaths($paths)
    {
        $this->container['paths'] = $paths;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\CollingMedia\Infusionsoft\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\CollingMedia\Infusionsoft\ObjectSerializer::sanitizeForSerialization($this));
    }
}


