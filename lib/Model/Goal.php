<?php
/**
 * Goal
 *
 * PHP version 5
 *
 * @category Class
 * @package  CollingMedia\Infusionsoft
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Infusionsoft
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: V1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace CollingMedia\Infusionsoft\Model;

use \ArrayAccess;

/**
 * Goal Class Doc Comment
 *
 * @category    Class
 * @package     CollingMedia\Infusionsoft
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class Goal implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'Goal';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'historical_contact_counts' => '\CollingMedia\Infusionsoft\Model\InlineResponse2002HistoricalContactCounts',
        'id' => 'int',
        'name' => 'string',
        'next_sequence_ids' => 'int[]',
        'previous_sequence_ids' => 'int[]',
        'type' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerFormats = [
        'historical_contact_counts' => null,
        'id' => 'int64',
        'name' => null,
        'next_sequence_ids' => 'int64',
        'previous_sequence_ids' => 'int64',
        'type' => null
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'historical_contact_counts' => 'historical_contact_counts',
        'id' => 'id',
        'name' => 'name',
        'next_sequence_ids' => 'next_sequence_ids',
        'previous_sequence_ids' => 'previous_sequence_ids',
        'type' => 'type'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'historical_contact_counts' => 'setHistoricalContactCounts',
        'id' => 'setId',
        'name' => 'setName',
        'next_sequence_ids' => 'setNextSequenceIds',
        'previous_sequence_ids' => 'setPreviousSequenceIds',
        'type' => 'setType'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'historical_contact_counts' => 'getHistoricalContactCounts',
        'id' => 'getId',
        'name' => 'getName',
        'next_sequence_ids' => 'getNextSequenceIds',
        'previous_sequence_ids' => 'getPreviousSequenceIds',
        'type' => 'getType'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    const TYPE_WEB_FORM = 'WebForm';
    const TYPE_LANDING_PAGE = 'LandingPage';
    const TYPE_SURVEY = 'Survey';
    const TYPE_LINK_CLICK = 'LinkClick';
    const TYPE_SCORE = 'Score';
    const TYPE_PURCHASE = 'Purchase';
    const TYPE_QUOTE = 'Quote';
    const TYPE_WEBSITE_TRIGGER = 'WebsiteTrigger';
    const TYPE_INTERNAL_FORM = 'InternalForm';
    const TYPE_TASK = 'Task';
    const TYPE_STAGE_MOVE = 'StageMove';
    const TYPE_NOTE = 'Note';
    const TYPE_TAG = 'Tag';
    const TYPE_GRO_SOCIAL = 'GroSocial';
    const TYPE_TWITTER_FORM = 'TwitterForm';
    const TYPE_API = 'API';
    const TYPE_WORD_PRESS = 'WordPress';
    const TYPE_NEW_LANDING_PAGE = 'NewLandingPage';
    

    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getTypeAllowableValues()
    {
        return [
            self::TYPE_WEB_FORM,
            self::TYPE_LANDING_PAGE,
            self::TYPE_SURVEY,
            self::TYPE_LINK_CLICK,
            self::TYPE_SCORE,
            self::TYPE_PURCHASE,
            self::TYPE_QUOTE,
            self::TYPE_WEBSITE_TRIGGER,
            self::TYPE_INTERNAL_FORM,
            self::TYPE_TASK,
            self::TYPE_STAGE_MOVE,
            self::TYPE_NOTE,
            self::TYPE_TAG,
            self::TYPE_GRO_SOCIAL,
            self::TYPE_TWITTER_FORM,
            self::TYPE_API,
            self::TYPE_WORD_PRESS,
            self::TYPE_NEW_LANDING_PAGE,
        ];
    }
    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['historical_contact_counts'] = isset($data['historical_contact_counts']) ? $data['historical_contact_counts'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['next_sequence_ids'] = isset($data['next_sequence_ids']) ? $data['next_sequence_ids'] : null;
        $this->container['previous_sequence_ids'] = isset($data['previous_sequence_ids']) ? $data['previous_sequence_ids'] : null;
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        $allowed_values = $this->getTypeAllowableValues();
        if (!in_array($this->container['type'], $allowed_values)) {
            $invalid_properties[] = sprintf(
                "invalid value for 'type', must be one of '%s'",
                implode("', '", $allowed_values)
            );
        }

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        $allowed_values = $this->getTypeAllowableValues();
        if (!in_array($this->container['type'], $allowed_values)) {
            return false;
        }
        return true;
    }


    /**
     * Gets historical_contact_counts
     * @return \CollingMedia\Infusionsoft\Model\InlineResponse2002HistoricalContactCounts
     */
    public function getHistoricalContactCounts()
    {
        return $this->container['historical_contact_counts'];
    }

    /**
     * Sets historical_contact_counts
     * @param \CollingMedia\Infusionsoft\Model\InlineResponse2002HistoricalContactCounts $historical_contact_counts
     * @return $this
     */
    public function setHistoricalContactCounts($historical_contact_counts)
    {
        $this->container['historical_contact_counts'] = $historical_contact_counts;

        return $this;
    }

    /**
     * Gets id
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     * @param int $id
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets name
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     * @param string $name
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets next_sequence_ids
     * @return int[]
     */
    public function getNextSequenceIds()
    {
        return $this->container['next_sequence_ids'];
    }

    /**
     * Sets next_sequence_ids
     * @param int[] $next_sequence_ids
     * @return $this
     */
    public function setNextSequenceIds($next_sequence_ids)
    {
        $this->container['next_sequence_ids'] = $next_sequence_ids;

        return $this;
    }

    /**
     * Gets previous_sequence_ids
     * @return int[]
     */
    public function getPreviousSequenceIds()
    {
        return $this->container['previous_sequence_ids'];
    }

    /**
     * Sets previous_sequence_ids
     * @param int[] $previous_sequence_ids
     * @return $this
     */
    public function setPreviousSequenceIds($previous_sequence_ids)
    {
        $this->container['previous_sequence_ids'] = $previous_sequence_ids;

        return $this;
    }

    /**
     * Gets type
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     * @param string $type
     * @return $this
     */
    public function setType($type)
    {
        $allowed_values = $this->getTypeAllowableValues();
        if (!is_null($type) && !in_array($type, $allowed_values)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'type', must be one of '%s'",
                    implode("', '", $allowed_values)
                )
            );
        }
        $this->container['type'] = $type;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\CollingMedia\Infusionsoft\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\CollingMedia\Infusionsoft\ObjectSerializer::sanitizeForSerialization($this));
    }
}


