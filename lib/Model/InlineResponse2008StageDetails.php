<?php
/**
 * InlineResponse2008StageDetails
 *
 * PHP version 5
 *
 * @category Class
 * @package  CollingMedia\Infusionsoft
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Infusionsoft
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: V1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace CollingMedia\Infusionsoft\Model;

use \ArrayAccess;

/**
 * InlineResponse2008StageDetails Class Doc Comment
 *
 * @category    Class
 * @package     CollingMedia\Infusionsoft
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class InlineResponse2008StageDetails implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'inline_response_200_8_stage_details';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'check_list_items' => '\CollingMedia\Infusionsoft\Model\InlineResponse2008StageDetailsCheckListItems[]',
        'probability' => 'int',
        'stage_order' => 'int',
        'target_num_days' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerFormats = [
        'check_list_items' => null,
        'probability' => 'int32',
        'stage_order' => 'int32',
        'target_num_days' => 'int32'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'check_list_items' => 'check_list_items',
        'probability' => 'probability',
        'stage_order' => 'stage_order',
        'target_num_days' => 'target_num_days'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'check_list_items' => 'setCheckListItems',
        'probability' => 'setProbability',
        'stage_order' => 'setStageOrder',
        'target_num_days' => 'setTargetNumDays'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'check_list_items' => 'getCheckListItems',
        'probability' => 'getProbability',
        'stage_order' => 'getStageOrder',
        'target_num_days' => 'getTargetNumDays'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['check_list_items'] = isset($data['check_list_items']) ? $data['check_list_items'] : null;
        $this->container['probability'] = isset($data['probability']) ? $data['probability'] : null;
        $this->container['stage_order'] = isset($data['stage_order']) ? $data['stage_order'] : null;
        $this->container['target_num_days'] = isset($data['target_num_days']) ? $data['target_num_days'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets check_list_items
     * @return \CollingMedia\Infusionsoft\Model\InlineResponse2008StageDetailsCheckListItems[]
     */
    public function getCheckListItems()
    {
        return $this->container['check_list_items'];
    }

    /**
     * Sets check_list_items
     * @param \CollingMedia\Infusionsoft\Model\InlineResponse2008StageDetailsCheckListItems[] $check_list_items
     * @return $this
     */
    public function setCheckListItems($check_list_items)
    {
        $this->container['check_list_items'] = $check_list_items;

        return $this;
    }

    /**
     * Gets probability
     * @return int
     */
    public function getProbability()
    {
        return $this->container['probability'];
    }

    /**
     * Sets probability
     * @param int $probability
     * @return $this
     */
    public function setProbability($probability)
    {
        $this->container['probability'] = $probability;

        return $this;
    }

    /**
     * Gets stage_order
     * @return int
     */
    public function getStageOrder()
    {
        return $this->container['stage_order'];
    }

    /**
     * Sets stage_order
     * @param int $stage_order
     * @return $this
     */
    public function setStageOrder($stage_order)
    {
        $this->container['stage_order'] = $stage_order;

        return $this;
    }

    /**
     * Gets target_num_days
     * @return int
     */
    public function getTargetNumDays()
    {
        return $this->container['target_num_days'];
    }

    /**
     * Sets target_num_days
     * @param int $target_num_days
     * @return $this
     */
    public function setTargetNumDays($target_num_days)
    {
        $this->container['target_num_days'] = $target_num_days;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\CollingMedia\Infusionsoft\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\CollingMedia\Infusionsoft\ObjectSerializer::sanitizeForSerialization($this));
    }
}


