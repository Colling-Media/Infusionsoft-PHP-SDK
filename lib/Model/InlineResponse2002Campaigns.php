<?php
/**
 * InlineResponse2002Campaigns
 *
 * PHP version 5
 *
 * @category Class
 * @package  CollingMedia\Infusionsoft
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Infusionsoft
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: V1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace CollingMedia\Infusionsoft\Model;

use \ArrayAccess;

/**
 * InlineResponse2002Campaigns Class Doc Comment
 *
 * @category    Class
 * @package     CollingMedia\Infusionsoft
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class InlineResponse2002Campaigns implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'inline_response_200_2_campaigns';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'active_contact_count' => 'int',
        'completed_contact_count' => 'int',
        'date_created' => '\DateTime',
        'error_message' => 'string',
        'goals' => '\CollingMedia\Infusionsoft\Model\InlineResponse2002Goals[]',
        'id' => 'int',
        'name' => 'string',
        'published_date' => '\DateTime',
        'published_status' => 'bool',
        'published_time_zone' => 'string',
        'sequences' => '\CollingMedia\Infusionsoft\Model\InlineResponse2002Sequences[]',
        'time_zone' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerFormats = [
        'active_contact_count' => 'int32',
        'completed_contact_count' => 'int32',
        'date_created' => 'date-time',
        'error_message' => null,
        'goals' => null,
        'id' => 'int64',
        'name' => null,
        'published_date' => 'date-time',
        'published_status' => null,
        'published_time_zone' => null,
        'sequences' => null,
        'time_zone' => null
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'active_contact_count' => 'active_contact_count',
        'completed_contact_count' => 'completed_contact_count',
        'date_created' => 'date_created',
        'error_message' => 'error_message',
        'goals' => 'goals',
        'id' => 'id',
        'name' => 'name',
        'published_date' => 'published_date',
        'published_status' => 'published_status',
        'published_time_zone' => 'published_time_zone',
        'sequences' => 'sequences',
        'time_zone' => 'time_zone'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'active_contact_count' => 'setActiveContactCount',
        'completed_contact_count' => 'setCompletedContactCount',
        'date_created' => 'setDateCreated',
        'error_message' => 'setErrorMessage',
        'goals' => 'setGoals',
        'id' => 'setId',
        'name' => 'setName',
        'published_date' => 'setPublishedDate',
        'published_status' => 'setPublishedStatus',
        'published_time_zone' => 'setPublishedTimeZone',
        'sequences' => 'setSequences',
        'time_zone' => 'setTimeZone'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'active_contact_count' => 'getActiveContactCount',
        'completed_contact_count' => 'getCompletedContactCount',
        'date_created' => 'getDateCreated',
        'error_message' => 'getErrorMessage',
        'goals' => 'getGoals',
        'id' => 'getId',
        'name' => 'getName',
        'published_date' => 'getPublishedDate',
        'published_status' => 'getPublishedStatus',
        'published_time_zone' => 'getPublishedTimeZone',
        'sequences' => 'getSequences',
        'time_zone' => 'getTimeZone'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['active_contact_count'] = isset($data['active_contact_count']) ? $data['active_contact_count'] : null;
        $this->container['completed_contact_count'] = isset($data['completed_contact_count']) ? $data['completed_contact_count'] : null;
        $this->container['date_created'] = isset($data['date_created']) ? $data['date_created'] : null;
        $this->container['error_message'] = isset($data['error_message']) ? $data['error_message'] : null;
        $this->container['goals'] = isset($data['goals']) ? $data['goals'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['published_date'] = isset($data['published_date']) ? $data['published_date'] : null;
        $this->container['published_status'] = isset($data['published_status']) ? $data['published_status'] : null;
        $this->container['published_time_zone'] = isset($data['published_time_zone']) ? $data['published_time_zone'] : null;
        $this->container['sequences'] = isset($data['sequences']) ? $data['sequences'] : null;
        $this->container['time_zone'] = isset($data['time_zone']) ? $data['time_zone'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets active_contact_count
     * @return int
     */
    public function getActiveContactCount()
    {
        return $this->container['active_contact_count'];
    }

    /**
     * Sets active_contact_count
     * @param int $active_contact_count
     * @return $this
     */
    public function setActiveContactCount($active_contact_count)
    {
        $this->container['active_contact_count'] = $active_contact_count;

        return $this;
    }

    /**
     * Gets completed_contact_count
     * @return int
     */
    public function getCompletedContactCount()
    {
        return $this->container['completed_contact_count'];
    }

    /**
     * Sets completed_contact_count
     * @param int $completed_contact_count
     * @return $this
     */
    public function setCompletedContactCount($completed_contact_count)
    {
        $this->container['completed_contact_count'] = $completed_contact_count;

        return $this;
    }

    /**
     * Gets date_created
     * @return \DateTime
     */
    public function getDateCreated()
    {
        return $this->container['date_created'];
    }

    /**
     * Sets date_created
     * @param \DateTime $date_created
     * @return $this
     */
    public function setDateCreated($date_created)
    {
        $this->container['date_created'] = $date_created;

        return $this;
    }

    /**
     * Gets error_message
     * @return string
     */
    public function getErrorMessage()
    {
        return $this->container['error_message'];
    }

    /**
     * Sets error_message
     * @param string $error_message
     * @return $this
     */
    public function setErrorMessage($error_message)
    {
        $this->container['error_message'] = $error_message;

        return $this;
    }

    /**
     * Gets goals
     * @return \CollingMedia\Infusionsoft\Model\InlineResponse2002Goals[]
     */
    public function getGoals()
    {
        return $this->container['goals'];
    }

    /**
     * Sets goals
     * @param \CollingMedia\Infusionsoft\Model\InlineResponse2002Goals[] $goals
     * @return $this
     */
    public function setGoals($goals)
    {
        $this->container['goals'] = $goals;

        return $this;
    }

    /**
     * Gets id
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     * @param int $id
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets name
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     * @param string $name
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets published_date
     * @return \DateTime
     */
    public function getPublishedDate()
    {
        return $this->container['published_date'];
    }

    /**
     * Sets published_date
     * @param \DateTime $published_date
     * @return $this
     */
    public function setPublishedDate($published_date)
    {
        $this->container['published_date'] = $published_date;

        return $this;
    }

    /**
     * Gets published_status
     * @return bool
     */
    public function getPublishedStatus()
    {
        return $this->container['published_status'];
    }

    /**
     * Sets published_status
     * @param bool $published_status
     * @return $this
     */
    public function setPublishedStatus($published_status)
    {
        $this->container['published_status'] = $published_status;

        return $this;
    }

    /**
     * Gets published_time_zone
     * @return string
     */
    public function getPublishedTimeZone()
    {
        return $this->container['published_time_zone'];
    }

    /**
     * Sets published_time_zone
     * @param string $published_time_zone
     * @return $this
     */
    public function setPublishedTimeZone($published_time_zone)
    {
        $this->container['published_time_zone'] = $published_time_zone;

        return $this;
    }

    /**
     * Gets sequences
     * @return \CollingMedia\Infusionsoft\Model\InlineResponse2002Sequences[]
     */
    public function getSequences()
    {
        return $this->container['sequences'];
    }

    /**
     * Sets sequences
     * @param \CollingMedia\Infusionsoft\Model\InlineResponse2002Sequences[] $sequences
     * @return $this
     */
    public function setSequences($sequences)
    {
        $this->container['sequences'] = $sequences;

        return $this;
    }

    /**
     * Gets time_zone
     * @return string
     */
    public function getTimeZone()
    {
        return $this->container['time_zone'];
    }

    /**
     * Sets time_zone
     * @param string $time_zone
     * @return $this
     */
    public function setTimeZone($time_zone)
    {
        $this->container['time_zone'] = $time_zone;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\CollingMedia\Infusionsoft\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\CollingMedia\Infusionsoft\ObjectSerializer::sanitizeForSerialization($this));
    }
}


