<?php
/**
 * SubscriptionPlan
 *
 * PHP version 5
 *
 * @category Class
 * @package  CollingMedia\Infusionsoft
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Infusionsoft
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: V1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace CollingMedia\Infusionsoft\Model;

use \ArrayAccess;

/**
 * SubscriptionPlan Class Doc Comment
 *
 * @category    Class
 * @package     CollingMedia\Infusionsoft
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class SubscriptionPlan implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'SubscriptionPlan';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'active' => 'bool',
        'cycle' => 'int',
        'frequency' => 'int',
        'id' => 'int',
        'number_of_cycles' => 'int',
        'plan_price' => 'double',
        'subscription_plan_index' => 'int',
        'subscription_plan_name' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerFormats = [
        'active' => null,
        'cycle' => 'int32',
        'frequency' => 'int32',
        'id' => 'int64',
        'number_of_cycles' => 'int32',
        'plan_price' => 'double',
        'subscription_plan_index' => 'int32',
        'subscription_plan_name' => null
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'active' => 'active',
        'cycle' => 'cycle',
        'frequency' => 'frequency',
        'id' => 'id',
        'number_of_cycles' => 'number_of_cycles',
        'plan_price' => 'plan_price',
        'subscription_plan_index' => 'subscription_plan_index',
        'subscription_plan_name' => 'subscription_plan_name'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'active' => 'setActive',
        'cycle' => 'setCycle',
        'frequency' => 'setFrequency',
        'id' => 'setId',
        'number_of_cycles' => 'setNumberOfCycles',
        'plan_price' => 'setPlanPrice',
        'subscription_plan_index' => 'setSubscriptionPlanIndex',
        'subscription_plan_name' => 'setSubscriptionPlanName'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'active' => 'getActive',
        'cycle' => 'getCycle',
        'frequency' => 'getFrequency',
        'id' => 'getId',
        'number_of_cycles' => 'getNumberOfCycles',
        'plan_price' => 'getPlanPrice',
        'subscription_plan_index' => 'getSubscriptionPlanIndex',
        'subscription_plan_name' => 'getSubscriptionPlanName'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['active'] = isset($data['active']) ? $data['active'] : null;
        $this->container['cycle'] = isset($data['cycle']) ? $data['cycle'] : null;
        $this->container['frequency'] = isset($data['frequency']) ? $data['frequency'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['number_of_cycles'] = isset($data['number_of_cycles']) ? $data['number_of_cycles'] : null;
        $this->container['plan_price'] = isset($data['plan_price']) ? $data['plan_price'] : null;
        $this->container['subscription_plan_index'] = isset($data['subscription_plan_index']) ? $data['subscription_plan_index'] : null;
        $this->container['subscription_plan_name'] = isset($data['subscription_plan_name']) ? $data['subscription_plan_name'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets active
     * @return bool
     */
    public function getActive()
    {
        return $this->container['active'];
    }

    /**
     * Sets active
     * @param bool $active
     * @return $this
     */
    public function setActive($active)
    {
        $this->container['active'] = $active;

        return $this;
    }

    /**
     * Gets cycle
     * @return int
     */
    public function getCycle()
    {
        return $this->container['cycle'];
    }

    /**
     * Sets cycle
     * @param int $cycle
     * @return $this
     */
    public function setCycle($cycle)
    {
        $this->container['cycle'] = $cycle;

        return $this;
    }

    /**
     * Gets frequency
     * @return int
     */
    public function getFrequency()
    {
        return $this->container['frequency'];
    }

    /**
     * Sets frequency
     * @param int $frequency
     * @return $this
     */
    public function setFrequency($frequency)
    {
        $this->container['frequency'] = $frequency;

        return $this;
    }

    /**
     * Gets id
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     * @param int $id
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets number_of_cycles
     * @return int
     */
    public function getNumberOfCycles()
    {
        return $this->container['number_of_cycles'];
    }

    /**
     * Sets number_of_cycles
     * @param int $number_of_cycles
     * @return $this
     */
    public function setNumberOfCycles($number_of_cycles)
    {
        $this->container['number_of_cycles'] = $number_of_cycles;

        return $this;
    }

    /**
     * Gets plan_price
     * @return double
     */
    public function getPlanPrice()
    {
        return $this->container['plan_price'];
    }

    /**
     * Sets plan_price
     * @param double $plan_price
     * @return $this
     */
    public function setPlanPrice($plan_price)
    {
        $this->container['plan_price'] = $plan_price;

        return $this;
    }

    /**
     * Gets subscription_plan_index
     * @return int
     */
    public function getSubscriptionPlanIndex()
    {
        return $this->container['subscription_plan_index'];
    }

    /**
     * Sets subscription_plan_index
     * @param int $subscription_plan_index
     * @return $this
     */
    public function setSubscriptionPlanIndex($subscription_plan_index)
    {
        $this->container['subscription_plan_index'] = $subscription_plan_index;

        return $this;
    }

    /**
     * Gets subscription_plan_name
     * @return string
     */
    public function getSubscriptionPlanName()
    {
        return $this->container['subscription_plan_name'];
    }

    /**
     * Sets subscription_plan_name
     * @param string $subscription_plan_name
     * @return $this
     */
    public function setSubscriptionPlanName($subscription_plan_name)
    {
        $this->container['subscription_plan_name'] = $subscription_plan_name;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\CollingMedia\Infusionsoft\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\CollingMedia\Infusionsoft\ObjectSerializer::sanitizeForSerialization($this));
    }
}


