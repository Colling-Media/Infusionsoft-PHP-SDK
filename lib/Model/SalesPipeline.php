<?php
/**
 * SalesPipeline
 *
 * PHP version 5
 *
 * @category Class
 * @package  CollingMedia\Infusionsoft
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Infusionsoft
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: V1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace CollingMedia\Infusionsoft\Model;

use \ArrayAccess;

/**
 * SalesPipeline Class Doc Comment
 *
 * @category    Class
 * @package     CollingMedia\Infusionsoft
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class SalesPipeline implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'SalesPipeline';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'end_stage' => 'bool',
        'is_default' => 'bool',
        'stage_count' => 'int',
        'stage_id' => 'int',
        'stage_name' => 'string',
        'stage_order' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerFormats = [
        'end_stage' => null,
        'is_default' => null,
        'stage_count' => 'int32',
        'stage_id' => 'int64',
        'stage_name' => null,
        'stage_order' => 'int32'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'end_stage' => 'end_stage',
        'is_default' => 'is_default',
        'stage_count' => 'stage_count',
        'stage_id' => 'stage_id',
        'stage_name' => 'stage_name',
        'stage_order' => 'stage_order'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'end_stage' => 'setEndStage',
        'is_default' => 'setIsDefault',
        'stage_count' => 'setStageCount',
        'stage_id' => 'setStageId',
        'stage_name' => 'setStageName',
        'stage_order' => 'setStageOrder'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'end_stage' => 'getEndStage',
        'is_default' => 'getIsDefault',
        'stage_count' => 'getStageCount',
        'stage_id' => 'getStageId',
        'stage_name' => 'getStageName',
        'stage_order' => 'getStageOrder'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['end_stage'] = isset($data['end_stage']) ? $data['end_stage'] : null;
        $this->container['is_default'] = isset($data['is_default']) ? $data['is_default'] : null;
        $this->container['stage_count'] = isset($data['stage_count']) ? $data['stage_count'] : null;
        $this->container['stage_id'] = isset($data['stage_id']) ? $data['stage_id'] : null;
        $this->container['stage_name'] = isset($data['stage_name']) ? $data['stage_name'] : null;
        $this->container['stage_order'] = isset($data['stage_order']) ? $data['stage_order'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets end_stage
     * @return bool
     */
    public function getEndStage()
    {
        return $this->container['end_stage'];
    }

    /**
     * Sets end_stage
     * @param bool $end_stage
     * @return $this
     */
    public function setEndStage($end_stage)
    {
        $this->container['end_stage'] = $end_stage;

        return $this;
    }

    /**
     * Gets is_default
     * @return bool
     */
    public function getIsDefault()
    {
        return $this->container['is_default'];
    }

    /**
     * Sets is_default
     * @param bool $is_default
     * @return $this
     */
    public function setIsDefault($is_default)
    {
        $this->container['is_default'] = $is_default;

        return $this;
    }

    /**
     * Gets stage_count
     * @return int
     */
    public function getStageCount()
    {
        return $this->container['stage_count'];
    }

    /**
     * Sets stage_count
     * @param int $stage_count
     * @return $this
     */
    public function setStageCount($stage_count)
    {
        $this->container['stage_count'] = $stage_count;

        return $this;
    }

    /**
     * Gets stage_id
     * @return int
     */
    public function getStageId()
    {
        return $this->container['stage_id'];
    }

    /**
     * Sets stage_id
     * @param int $stage_id
     * @return $this
     */
    public function setStageId($stage_id)
    {
        $this->container['stage_id'] = $stage_id;

        return $this;
    }

    /**
     * Gets stage_name
     * @return string
     */
    public function getStageName()
    {
        return $this->container['stage_name'];
    }

    /**
     * Sets stage_name
     * @param string $stage_name
     * @return $this
     */
    public function setStageName($stage_name)
    {
        $this->container['stage_name'] = $stage_name;

        return $this;
    }

    /**
     * Gets stage_order
     * @return int
     */
    public function getStageOrder()
    {
        return $this->container['stage_order'];
    }

    /**
     * Sets stage_order
     * @param int $stage_order
     * @return $this
     */
    public function setStageOrder($stage_order)
    {
        $this->container['stage_order'] = $stage_order;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\CollingMedia\Infusionsoft\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\CollingMedia\Infusionsoft\ObjectSerializer::sanitizeForSerialization($this));
    }
}


