<?php
/**
 * Product
 *
 * PHP version 5
 *
 * @category Class
 * @package  CollingMedia\Infusionsoft
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Infusionsoft
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: V1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace CollingMedia\Infusionsoft\Model;

use \ArrayAccess;

/**
 * Product Class Doc Comment
 *
 * @category    Class
 * @package     CollingMedia\Infusionsoft
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class Product implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'Product';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
        'product_desc' => 'string',
        'product_name' => 'string',
        'product_options' => '\CollingMedia\Infusionsoft\Model\InlineResponse20012ProductOptions[]',
        'product_price' => 'double',
        'product_short_desc' => 'string',
        'sku' => 'string',
        'status' => 'int',
        'sub_category_id' => 'int',
        'subscription_only' => 'bool',
        'subscription_plans' => '\CollingMedia\Infusionsoft\Model\InlineResponse20012SubscriptionPlans[]',
        'url' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => 'int64',
        'product_desc' => null,
        'product_name' => null,
        'product_options' => null,
        'product_price' => 'double',
        'product_short_desc' => null,
        'sku' => null,
        'status' => 'int32',
        'sub_category_id' => 'int64',
        'subscription_only' => null,
        'subscription_plans' => null,
        'url' => null
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'product_desc' => 'product_desc',
        'product_name' => 'product_name',
        'product_options' => 'product_options',
        'product_price' => 'product_price',
        'product_short_desc' => 'product_short_desc',
        'sku' => 'sku',
        'status' => 'status',
        'sub_category_id' => 'sub_category_id',
        'subscription_only' => 'subscription_only',
        'subscription_plans' => 'subscription_plans',
        'url' => 'url'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'product_desc' => 'setProductDesc',
        'product_name' => 'setProductName',
        'product_options' => 'setProductOptions',
        'product_price' => 'setProductPrice',
        'product_short_desc' => 'setProductShortDesc',
        'sku' => 'setSku',
        'status' => 'setStatus',
        'sub_category_id' => 'setSubCategoryId',
        'subscription_only' => 'setSubscriptionOnly',
        'subscription_plans' => 'setSubscriptionPlans',
        'url' => 'setUrl'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'product_desc' => 'getProductDesc',
        'product_name' => 'getProductName',
        'product_options' => 'getProductOptions',
        'product_price' => 'getProductPrice',
        'product_short_desc' => 'getProductShortDesc',
        'sku' => 'getSku',
        'status' => 'getStatus',
        'sub_category_id' => 'getSubCategoryId',
        'subscription_only' => 'getSubscriptionOnly',
        'subscription_plans' => 'getSubscriptionPlans',
        'url' => 'getUrl'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['product_desc'] = isset($data['product_desc']) ? $data['product_desc'] : null;
        $this->container['product_name'] = isset($data['product_name']) ? $data['product_name'] : null;
        $this->container['product_options'] = isset($data['product_options']) ? $data['product_options'] : null;
        $this->container['product_price'] = isset($data['product_price']) ? $data['product_price'] : null;
        $this->container['product_short_desc'] = isset($data['product_short_desc']) ? $data['product_short_desc'] : null;
        $this->container['sku'] = isset($data['sku']) ? $data['sku'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['sub_category_id'] = isset($data['sub_category_id']) ? $data['sub_category_id'] : null;
        $this->container['subscription_only'] = isset($data['subscription_only']) ? $data['subscription_only'] : null;
        $this->container['subscription_plans'] = isset($data['subscription_plans']) ? $data['subscription_plans'] : null;
        $this->container['url'] = isset($data['url']) ? $data['url'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets id
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     * @param int $id
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets product_desc
     * @return string
     */
    public function getProductDesc()
    {
        return $this->container['product_desc'];
    }

    /**
     * Sets product_desc
     * @param string $product_desc
     * @return $this
     */
    public function setProductDesc($product_desc)
    {
        $this->container['product_desc'] = $product_desc;

        return $this;
    }

    /**
     * Gets product_name
     * @return string
     */
    public function getProductName()
    {
        return $this->container['product_name'];
    }

    /**
     * Sets product_name
     * @param string $product_name
     * @return $this
     */
    public function setProductName($product_name)
    {
        $this->container['product_name'] = $product_name;

        return $this;
    }

    /**
     * Gets product_options
     * @return \CollingMedia\Infusionsoft\Model\InlineResponse20012ProductOptions[]
     */
    public function getProductOptions()
    {
        return $this->container['product_options'];
    }

    /**
     * Sets product_options
     * @param \CollingMedia\Infusionsoft\Model\InlineResponse20012ProductOptions[] $product_options
     * @return $this
     */
    public function setProductOptions($product_options)
    {
        $this->container['product_options'] = $product_options;

        return $this;
    }

    /**
     * Gets product_price
     * @return double
     */
    public function getProductPrice()
    {
        return $this->container['product_price'];
    }

    /**
     * Sets product_price
     * @param double $product_price
     * @return $this
     */
    public function setProductPrice($product_price)
    {
        $this->container['product_price'] = $product_price;

        return $this;
    }

    /**
     * Gets product_short_desc
     * @return string
     */
    public function getProductShortDesc()
    {
        return $this->container['product_short_desc'];
    }

    /**
     * Sets product_short_desc
     * @param string $product_short_desc
     * @return $this
     */
    public function setProductShortDesc($product_short_desc)
    {
        $this->container['product_short_desc'] = $product_short_desc;

        return $this;
    }

    /**
     * Gets sku
     * @return string
     */
    public function getSku()
    {
        return $this->container['sku'];
    }

    /**
     * Sets sku
     * @param string $sku
     * @return $this
     */
    public function setSku($sku)
    {
        $this->container['sku'] = $sku;

        return $this;
    }

    /**
     * Gets status
     * @return int
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     * @param int $status
     * @return $this
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets sub_category_id
     * @return int
     */
    public function getSubCategoryId()
    {
        return $this->container['sub_category_id'];
    }

    /**
     * Sets sub_category_id
     * @param int $sub_category_id
     * @return $this
     */
    public function setSubCategoryId($sub_category_id)
    {
        $this->container['sub_category_id'] = $sub_category_id;

        return $this;
    }

    /**
     * Gets subscription_only
     * @return bool
     */
    public function getSubscriptionOnly()
    {
        return $this->container['subscription_only'];
    }

    /**
     * Sets subscription_only
     * @param bool $subscription_only
     * @return $this
     */
    public function setSubscriptionOnly($subscription_only)
    {
        $this->container['subscription_only'] = $subscription_only;

        return $this;
    }

    /**
     * Gets subscription_plans
     * @return \CollingMedia\Infusionsoft\Model\InlineResponse20012SubscriptionPlans[]
     */
    public function getSubscriptionPlans()
    {
        return $this->container['subscription_plans'];
    }

    /**
     * Sets subscription_plans
     * @param \CollingMedia\Infusionsoft\Model\InlineResponse20012SubscriptionPlans[] $subscription_plans
     * @return $this
     */
    public function setSubscriptionPlans($subscription_plans)
    {
        $this->container['subscription_plans'] = $subscription_plans;

        return $this;
    }

    /**
     * Gets url
     * @return string
     */
    public function getUrl()
    {
        return $this->container['url'];
    }

    /**
     * Sets url
     * @param string $url
     * @return $this
     */
    public function setUrl($url)
    {
        $this->container['url'] = $url;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\CollingMedia\Infusionsoft\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\CollingMedia\Infusionsoft\ObjectSerializer::sanitizeForSerialization($this));
    }
}


