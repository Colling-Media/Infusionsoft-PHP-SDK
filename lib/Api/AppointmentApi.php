<?php
/**
 * AppointmentApi
 * PHP version 5
 *
 * @category Class
 * @package  CollingMedia\Infusionsoft
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Infusionsoft
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: V1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace CollingMedia\Infusionsoft\Api;

use \CollingMedia\Infusionsoft\ApiClient;
use \CollingMedia\Infusionsoft\ApiException;
use \CollingMedia\Infusionsoft\Configuration;
use \CollingMedia\Infusionsoft\ObjectSerializer;

/**
 * AppointmentApi Class Doc Comment
 *
 * @category Class
 * @package  CollingMedia\Infusionsoft
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class AppointmentApi
{
    /**
     * API Client
     *
     * @var \CollingMedia\Infusionsoft\ApiClient instance of the ApiClient
     */
    protected $apiClient;

    /**
     * Constructor
     *
     * @param \CollingMedia\Infusionsoft\ApiClient|null $apiClient The api client to use
     */
    public function __construct(\CollingMedia\Infusionsoft\ApiClient $apiClient = null)
    {
        if ($apiClient === null) {
            $apiClient = new ApiClient();
        }

        $this->apiClient = $apiClient;
    }

    /**
     * Get API client
     *
     * @return \CollingMedia\Infusionsoft\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }

    /**
     * Set the API client
     *
     * @param \CollingMedia\Infusionsoft\ApiClient $apiClient set the API client
     *
     * @return AppointmentApi
     */
    public function setApiClient(\CollingMedia\Infusionsoft\ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }

    /**
     * Operation appointmentsUsingGET
     *
     * List Appointments
     *
     * @param string $since Date to start searching from ex. &#x60;2017-01-01T22:17:59.039Z&#x60; (optional)
     * @param string $until Date to search to ex. &#x60;2017-01-01T22:17:59.039Z&#x60; (optional)
     * @param int $limit Sets a total of items to return (optional)
     * @param int $offset Sets a beginning range of items to return (optional)
     * @throws \CollingMedia\Infusionsoft\ApiException on non-2xx response
     * @return \CollingMedia\Infusionsoft\Model\InlineResponse200
     */
    public function appointmentsUsingGET($since = null, $until = null, $limit = null, $offset = null)
    {
        list($response) = $this->appointmentsUsingGETWithHttpInfo($since, $until, $limit, $offset);
        return $response;
    }

    /**
     * Operation appointmentsUsingGETWithHttpInfo
     *
     * List Appointments
     *
     * @param string $since Date to start searching from ex. &#x60;2017-01-01T22:17:59.039Z&#x60; (optional)
     * @param string $until Date to search to ex. &#x60;2017-01-01T22:17:59.039Z&#x60; (optional)
     * @param int $limit Sets a total of items to return (optional)
     * @param int $offset Sets a beginning range of items to return (optional)
     * @throws \CollingMedia\Infusionsoft\ApiException on non-2xx response
     * @return array of \CollingMedia\Infusionsoft\Model\InlineResponse200, HTTP status code, HTTP response headers (array of strings)
     */
    public function appointmentsUsingGETWithHttpInfo($since = null, $until = null, $limit = null, $offset = null)
    {
        // parse inputs
        $resourcePath = "/appointments";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if ($since !== null) {
            $queryParams['since'] = $this->apiClient->getSerializer()->toQueryValue($since);
        }
        // query params
        if ($until !== null) {
            $queryParams['until'] = $this->apiClient->getSerializer()->toQueryValue($until);
        }
        // query params
        if ($limit !== null) {
            $queryParams['limit'] = $this->apiClient->getSerializer()->toQueryValue($limit);
        }
        // query params
        if ($offset !== null) {
            $queryParams['offset'] = $this->apiClient->getSerializer()->toQueryValue($offset);
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\CollingMedia\Infusionsoft\Model\InlineResponse200',
                '/appointments'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\CollingMedia\Infusionsoft\Model\InlineResponse200', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\CollingMedia\Infusionsoft\Model\InlineResponse200', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'string', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'string', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'string', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation createAppointmentUsingPOST
     *
     * Create an Appointment
     *
     * @param \CollingMedia\Infusionsoft\Model\Appointment $appointment appointment (required)
     * @throws \CollingMedia\Infusionsoft\ApiException on non-2xx response
     * @return \CollingMedia\Infusionsoft\Model\InlineResponse200Appointments
     */
    public function createAppointmentUsingPOST($appointment)
    {
        list($response) = $this->createAppointmentUsingPOSTWithHttpInfo($appointment);
        return $response;
    }

    /**
     * Operation createAppointmentUsingPOSTWithHttpInfo
     *
     * Create an Appointment
     *
     * @param \CollingMedia\Infusionsoft\Model\Appointment $appointment appointment (required)
     * @throws \CollingMedia\Infusionsoft\ApiException on non-2xx response
     * @return array of \CollingMedia\Infusionsoft\Model\InlineResponse200Appointments, HTTP status code, HTTP response headers (array of strings)
     */
    public function createAppointmentUsingPOSTWithHttpInfo($appointment)
    {
        // verify the required parameter 'appointment' is set
        if ($appointment === null) {
            throw new \InvalidArgumentException('Missing the required parameter $appointment when calling createAppointmentUsingPOST');
        }
        // parse inputs
        $resourcePath = "/appointments";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // body params
        $_tempBody = null;
        if (isset($appointment)) {
            $_tempBody = $appointment;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\CollingMedia\Infusionsoft\Model\InlineResponse200Appointments',
                '/appointments'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\CollingMedia\Infusionsoft\Model\InlineResponse200Appointments', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\CollingMedia\Infusionsoft\Model\InlineResponse200Appointments', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'string', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'string', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation loadAppointmentUsingGET
     *
     * Retrieve an Appointment
     *
     * @param string $appointment_id appointmentId (required)
     * @throws \CollingMedia\Infusionsoft\ApiException on non-2xx response
     * @return \CollingMedia\Infusionsoft\Model\InlineResponse200Appointments
     */
    public function loadAppointmentUsingGET($appointment_id)
    {
        list($response) = $this->loadAppointmentUsingGETWithHttpInfo($appointment_id);
        return $response;
    }

    /**
     * Operation loadAppointmentUsingGETWithHttpInfo
     *
     * Retrieve an Appointment
     *
     * @param string $appointment_id appointmentId (required)
     * @throws \CollingMedia\Infusionsoft\ApiException on non-2xx response
     * @return array of \CollingMedia\Infusionsoft\Model\InlineResponse200Appointments, HTTP status code, HTTP response headers (array of strings)
     */
    public function loadAppointmentUsingGETWithHttpInfo($appointment_id)
    {
        // verify the required parameter 'appointment_id' is set
        if ($appointment_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $appointment_id when calling loadAppointmentUsingGET');
        }
        // parse inputs
        $resourcePath = "/appointments/{appointmentId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($appointment_id !== null) {
            $resourcePath = str_replace(
                "{" . "appointmentId" . "}",
                $this->apiClient->getSerializer()->toPathValue($appointment_id),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\CollingMedia\Infusionsoft\Model\InlineResponse200Appointments',
                '/appointments/{appointmentId}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\CollingMedia\Infusionsoft\Model\InlineResponse200Appointments', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\CollingMedia\Infusionsoft\Model\InlineResponse200Appointments', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'string', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'string', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'string', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation removeAppointmentUsingDELETE
     *
     * Delete an Appointment
     *
     * @param string $appointment_id appointmentId (required)
     * @throws \CollingMedia\Infusionsoft\ApiException on non-2xx response
     * @return void
     */
    public function removeAppointmentUsingDELETE($appointment_id)
    {
        list($response) = $this->removeAppointmentUsingDELETEWithHttpInfo($appointment_id);
        return $response;
    }

    /**
     * Operation removeAppointmentUsingDELETEWithHttpInfo
     *
     * Delete an Appointment
     *
     * @param string $appointment_id appointmentId (required)
     * @throws \CollingMedia\Infusionsoft\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function removeAppointmentUsingDELETEWithHttpInfo($appointment_id)
    {
        // verify the required parameter 'appointment_id' is set
        if ($appointment_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $appointment_id when calling removeAppointmentUsingDELETE');
        }
        // parse inputs
        $resourcePath = "/appointments/{appointmentId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($appointment_id !== null) {
            $resourcePath = str_replace(
                "{" . "appointmentId" . "}",
                $this->apiClient->getSerializer()->toPathValue($appointment_id),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/appointments/{appointmentId}'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 401:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'string', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'string', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'string', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation replaceAppointmentUsingPUT
     *
     * Replace an Appointment
     *
     * @param string $appointment_id appointmentId (required)
     * @param \CollingMedia\Infusionsoft\Model\Appointment1 $appointment appointment (required)
     * @throws \CollingMedia\Infusionsoft\ApiException on non-2xx response
     * @return \CollingMedia\Infusionsoft\Model\InlineResponse200Appointments
     */
    public function replaceAppointmentUsingPUT($appointment_id, $appointment)
    {
        list($response) = $this->replaceAppointmentUsingPUTWithHttpInfo($appointment_id, $appointment);
        return $response;
    }

    /**
     * Operation replaceAppointmentUsingPUTWithHttpInfo
     *
     * Replace an Appointment
     *
     * @param string $appointment_id appointmentId (required)
     * @param \CollingMedia\Infusionsoft\Model\Appointment1 $appointment appointment (required)
     * @throws \CollingMedia\Infusionsoft\ApiException on non-2xx response
     * @return array of \CollingMedia\Infusionsoft\Model\InlineResponse200Appointments, HTTP status code, HTTP response headers (array of strings)
     */
    public function replaceAppointmentUsingPUTWithHttpInfo($appointment_id, $appointment)
    {
        // verify the required parameter 'appointment_id' is set
        if ($appointment_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $appointment_id when calling replaceAppointmentUsingPUT');
        }
        // verify the required parameter 'appointment' is set
        if ($appointment === null) {
            throw new \InvalidArgumentException('Missing the required parameter $appointment when calling replaceAppointmentUsingPUT');
        }
        // parse inputs
        $resourcePath = "/appointments/{appointmentId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($appointment_id !== null) {
            $resourcePath = str_replace(
                "{" . "appointmentId" . "}",
                $this->apiClient->getSerializer()->toPathValue($appointment_id),
                $resourcePath
            );
        }
        // body params
        $_tempBody = null;
        if (isset($appointment)) {
            $_tempBody = $appointment;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\CollingMedia\Infusionsoft\Model\InlineResponse200Appointments',
                '/appointments/{appointmentId}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\CollingMedia\Infusionsoft\Model\InlineResponse200Appointments', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\CollingMedia\Infusionsoft\Model\InlineResponse200Appointments', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'string', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'string', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'string', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation searchUsingGET
     *
     * Search Appointments
     *
     * @param string $since Date to start searching from ex. &#x60;2017-01-01T22:17:59.039Z&#x60; (optional)
     * @param string $until Date to search to ex. &#x60;2017-01-01T22:17:59.039Z&#x60; (optional)
     * @param int $limit Sets a total of items to return (optional)
     * @param int $offset Sets a beginning range of items to return (optional)
     * @throws \CollingMedia\Infusionsoft\ApiException on non-2xx response
     * @return \CollingMedia\Infusionsoft\Model\InlineResponse200
     */
    public function searchUsingGET($since = null, $until = null, $limit = null, $offset = null)
    {
        list($response) = $this->searchUsingGETWithHttpInfo($since, $until, $limit, $offset);
        return $response;
    }

    /**
     * Operation searchUsingGETWithHttpInfo
     *
     * Search Appointments
     *
     * @param string $since Date to start searching from ex. &#x60;2017-01-01T22:17:59.039Z&#x60; (optional)
     * @param string $until Date to search to ex. &#x60;2017-01-01T22:17:59.039Z&#x60; (optional)
     * @param int $limit Sets a total of items to return (optional)
     * @param int $offset Sets a beginning range of items to return (optional)
     * @throws \CollingMedia\Infusionsoft\ApiException on non-2xx response
     * @return array of \CollingMedia\Infusionsoft\Model\InlineResponse200, HTTP status code, HTTP response headers (array of strings)
     */
    public function searchUsingGETWithHttpInfo($since = null, $until = null, $limit = null, $offset = null)
    {
        // parse inputs
        $resourcePath = "/appointments/search";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if ($since !== null) {
            $queryParams['since'] = $this->apiClient->getSerializer()->toQueryValue($since);
        }
        // query params
        if ($until !== null) {
            $queryParams['until'] = $this->apiClient->getSerializer()->toQueryValue($until);
        }
        // query params
        if ($limit !== null) {
            $queryParams['limit'] = $this->apiClient->getSerializer()->toQueryValue($limit);
        }
        // query params
        if ($offset !== null) {
            $queryParams['offset'] = $this->apiClient->getSerializer()->toQueryValue($offset);
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\CollingMedia\Infusionsoft\Model\InlineResponse200',
                '/appointments/search'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\CollingMedia\Infusionsoft\Model\InlineResponse200', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\CollingMedia\Infusionsoft\Model\InlineResponse200', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'string', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'string', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'string', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation syncUsingGET
     *
     * Retrieve Synced Appointments
     *
     * @param string $sync_token sync_token (optional)
     * @param int $limit Sets a total of items to return (optional)
     * @param int $offset Sets a beginning range of items to return (optional)
     * @throws \CollingMedia\Infusionsoft\ApiException on non-2xx response
     * @return \CollingMedia\Infusionsoft\Model\InlineResponse2001
     */
    public function syncUsingGET($sync_token = null, $limit = null, $offset = null)
    {
        list($response) = $this->syncUsingGETWithHttpInfo($sync_token, $limit, $offset);
        return $response;
    }

    /**
     * Operation syncUsingGETWithHttpInfo
     *
     * Retrieve Synced Appointments
     *
     * @param string $sync_token sync_token (optional)
     * @param int $limit Sets a total of items to return (optional)
     * @param int $offset Sets a beginning range of items to return (optional)
     * @throws \CollingMedia\Infusionsoft\ApiException on non-2xx response
     * @return array of \CollingMedia\Infusionsoft\Model\InlineResponse2001, HTTP status code, HTTP response headers (array of strings)
     */
    public function syncUsingGETWithHttpInfo($sync_token = null, $limit = null, $offset = null)
    {
        // parse inputs
        $resourcePath = "/appointments/sync";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if ($sync_token !== null) {
            $queryParams['sync_token'] = $this->apiClient->getSerializer()->toQueryValue($sync_token);
        }
        // query params
        if ($limit !== null) {
            $queryParams['limit'] = $this->apiClient->getSerializer()->toQueryValue($limit);
        }
        // query params
        if ($offset !== null) {
            $queryParams['offset'] = $this->apiClient->getSerializer()->toQueryValue($offset);
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\CollingMedia\Infusionsoft\Model\InlineResponse2001',
                '/appointments/sync'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\CollingMedia\Infusionsoft\Model\InlineResponse2001', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\CollingMedia\Infusionsoft\Model\InlineResponse2001', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'string', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'string', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'string', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation updateAppointmentUsingPATCH
     *
     * Update an Appointment
     *
     * @param string $appointment_id appointmentId (required)
     * @param \CollingMedia\Infusionsoft\Model\Appointment2 $appointment appointment (required)
     * @throws \CollingMedia\Infusionsoft\ApiException on non-2xx response
     * @return \CollingMedia\Infusionsoft\Model\InlineResponse200Appointments
     */
    public function updateAppointmentUsingPATCH($appointment_id, $appointment)
    {
        list($response) = $this->updateAppointmentUsingPATCHWithHttpInfo($appointment_id, $appointment);
        return $response;
    }

    /**
     * Operation updateAppointmentUsingPATCHWithHttpInfo
     *
     * Update an Appointment
     *
     * @param string $appointment_id appointmentId (required)
     * @param \CollingMedia\Infusionsoft\Model\Appointment2 $appointment appointment (required)
     * @throws \CollingMedia\Infusionsoft\ApiException on non-2xx response
     * @return array of \CollingMedia\Infusionsoft\Model\InlineResponse200Appointments, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateAppointmentUsingPATCHWithHttpInfo($appointment_id, $appointment)
    {
        // verify the required parameter 'appointment_id' is set
        if ($appointment_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $appointment_id when calling updateAppointmentUsingPATCH');
        }
        // verify the required parameter 'appointment' is set
        if ($appointment === null) {
            throw new \InvalidArgumentException('Missing the required parameter $appointment when calling updateAppointmentUsingPATCH');
        }
        // parse inputs
        $resourcePath = "/appointments/{appointmentId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($appointment_id !== null) {
            $resourcePath = str_replace(
                "{" . "appointmentId" . "}",
                $this->apiClient->getSerializer()->toPathValue($appointment_id),
                $resourcePath
            );
        }
        // body params
        $_tempBody = null;
        if (isset($appointment)) {
            $_tempBody = $appointment;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PATCH',
                $queryParams,
                $httpBody,
                $headerParams,
                '\CollingMedia\Infusionsoft\Model\InlineResponse200Appointments',
                '/appointments/{appointmentId}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\CollingMedia\Infusionsoft\Model\InlineResponse200Appointments', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\CollingMedia\Infusionsoft\Model\InlineResponse200Appointments', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'string', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'string', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'string', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }
}
