<?php
/**
 * TagsApi
 * PHP version 5
 *
 * @category Class
 * @package  CollingMedia\Infusionsoft
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Infusionsoft
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: V1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace CollingMedia\Infusionsoft\Api;

use \CollingMedia\Infusionsoft\ApiClient;
use \CollingMedia\Infusionsoft\ApiException;
use \CollingMedia\Infusionsoft\Configuration;
use \CollingMedia\Infusionsoft\ObjectSerializer;

/**
 * TagsApi Class Doc Comment
 *
 * @category Class
 * @package  CollingMedia\Infusionsoft
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class TagsApi
{
    /**
     * API Client
     *
     * @var \CollingMedia\Infusionsoft\ApiClient instance of the ApiClient
     */
    protected $apiClient;

    /**
     * Constructor
     *
     * @param \CollingMedia\Infusionsoft\ApiClient|null $apiClient The api client to use
     */
    public function __construct(\CollingMedia\Infusionsoft\ApiClient $apiClient = null)
    {
        if ($apiClient === null) {
            $apiClient = new ApiClient();
        }

        $this->apiClient = $apiClient;
    }

    /**
     * Get API client
     *
     * @return \CollingMedia\Infusionsoft\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }

    /**
     * Set the API client
     *
     * @param \CollingMedia\Infusionsoft\ApiClient $apiClient set the API client
     *
     * @return TagsApi
     */
    public function setApiClient(\CollingMedia\Infusionsoft\ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }

    /**
     * Operation applyTagToContactIdsUsingPOST
     *
     * Apply Tag to Contacts
     *
     * @param int $tag_id tagId (required)
     * @param \CollingMedia\Infusionsoft\Model\Ids2 $ids ids (required)
     * @throws \CollingMedia\Infusionsoft\ApiException on non-2xx response
     * @return \CollingMedia\Infusionsoft\Model\InlineResponse2006[]
     */
    public function applyTagToContactIdsUsingPOST($tag_id, $ids)
    {
        list($response) = $this->applyTagToContactIdsUsingPOSTWithHttpInfo($tag_id, $ids);
        return $response;
    }

    /**
     * Operation applyTagToContactIdsUsingPOSTWithHttpInfo
     *
     * Apply Tag to Contacts
     *
     * @param int $tag_id tagId (required)
     * @param \CollingMedia\Infusionsoft\Model\Ids2 $ids ids (required)
     * @throws \CollingMedia\Infusionsoft\ApiException on non-2xx response
     * @return array of \CollingMedia\Infusionsoft\Model\InlineResponse2006[], HTTP status code, HTTP response headers (array of strings)
     */
    public function applyTagToContactIdsUsingPOSTWithHttpInfo($tag_id, $ids)
    {
        // verify the required parameter 'tag_id' is set
        if ($tag_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $tag_id when calling applyTagToContactIdsUsingPOST');
        }
        // verify the required parameter 'ids' is set
        if ($ids === null) {
            throw new \InvalidArgumentException('Missing the required parameter $ids when calling applyTagToContactIdsUsingPOST');
        }
        // parse inputs
        $resourcePath = "/tags/{tagId}/contacts";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($tag_id !== null) {
            $resourcePath = str_replace(
                "{" . "tagId" . "}",
                $this->apiClient->getSerializer()->toPathValue($tag_id),
                $resourcePath
            );
        }
        // body params
        $_tempBody = null;
        if (isset($ids)) {
            $_tempBody = $ids;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\CollingMedia\Infusionsoft\Model\InlineResponse2006[]',
                '/tags/{tagId}/contacts'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\CollingMedia\Infusionsoft\Model\InlineResponse2006[]', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\CollingMedia\Infusionsoft\Model\InlineResponse2006[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'string', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'string', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation listContactsForTagIdUsingGET
     *
     * List Tagged Contacts
     *
     * @param int $tag_id tagId (required)
     * @param int $limit Sets a total of items to return (optional)
     * @param int $offset Sets a beginning range of items to return (optional)
     * @throws \CollingMedia\Infusionsoft\ApiException on non-2xx response
     * @return \CollingMedia\Infusionsoft\Model\InlineResponse20014
     */
    public function listContactsForTagIdUsingGET($tag_id, $limit = null, $offset = null)
    {
        list($response) = $this->listContactsForTagIdUsingGETWithHttpInfo($tag_id, $limit, $offset);
        return $response;
    }

    /**
     * Operation listContactsForTagIdUsingGETWithHttpInfo
     *
     * List Tagged Contacts
     *
     * @param int $tag_id tagId (required)
     * @param int $limit Sets a total of items to return (optional)
     * @param int $offset Sets a beginning range of items to return (optional)
     * @throws \CollingMedia\Infusionsoft\ApiException on non-2xx response
     * @return array of \CollingMedia\Infusionsoft\Model\InlineResponse20014, HTTP status code, HTTP response headers (array of strings)
     */
    public function listContactsForTagIdUsingGETWithHttpInfo($tag_id, $limit = null, $offset = null)
    {
        // verify the required parameter 'tag_id' is set
        if ($tag_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $tag_id when calling listContactsForTagIdUsingGET');
        }
        // parse inputs
        $resourcePath = "/tags/{tagId}/contacts";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if ($limit !== null) {
            $queryParams['limit'] = $this->apiClient->getSerializer()->toQueryValue($limit);
        }
        // query params
        if ($offset !== null) {
            $queryParams['offset'] = $this->apiClient->getSerializer()->toQueryValue($offset);
        }
        // path params
        if ($tag_id !== null) {
            $resourcePath = str_replace(
                "{" . "tagId" . "}",
                $this->apiClient->getSerializer()->toPathValue($tag_id),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\CollingMedia\Infusionsoft\Model\InlineResponse20014',
                '/tags/{tagId}/contacts'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\CollingMedia\Infusionsoft\Model\InlineResponse20014', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\CollingMedia\Infusionsoft\Model\InlineResponse20014', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'string', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'string', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'string', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation removeTagFromContactIdUsingDELETE
     *
     * Remove Tag from Contact
     *
     * @param int $tag_id tagId (required)
     * @param int $contact_id contactId (required)
     * @throws \CollingMedia\Infusionsoft\ApiException on non-2xx response
     * @return void
     */
    public function removeTagFromContactIdUsingDELETE($tag_id, $contact_id)
    {
        list($response) = $this->removeTagFromContactIdUsingDELETEWithHttpInfo($tag_id, $contact_id);
        return $response;
    }

    /**
     * Operation removeTagFromContactIdUsingDELETEWithHttpInfo
     *
     * Remove Tag from Contact
     *
     * @param int $tag_id tagId (required)
     * @param int $contact_id contactId (required)
     * @throws \CollingMedia\Infusionsoft\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function removeTagFromContactIdUsingDELETEWithHttpInfo($tag_id, $contact_id)
    {
        // verify the required parameter 'tag_id' is set
        if ($tag_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $tag_id when calling removeTagFromContactIdUsingDELETE');
        }
        // verify the required parameter 'contact_id' is set
        if ($contact_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $contact_id when calling removeTagFromContactIdUsingDELETE');
        }
        // parse inputs
        $resourcePath = "/tags/{tagId}/contacts/{contactId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($tag_id !== null) {
            $resourcePath = str_replace(
                "{" . "tagId" . "}",
                $this->apiClient->getSerializer()->toPathValue($tag_id),
                $resourcePath
            );
        }
        // path params
        if ($contact_id !== null) {
            $resourcePath = str_replace(
                "{" . "contactId" . "}",
                $this->apiClient->getSerializer()->toPathValue($contact_id),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/tags/{tagId}/contacts/{contactId}'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 401:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'string', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'string', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'string', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation removeTagFromContactIdsUsingDELETE
     *
     * Remove Tag from Contacts
     *
     * @param int $tag_id tagId (required)
     * @param int[] $ids ids (required)
     * @throws \CollingMedia\Infusionsoft\ApiException on non-2xx response
     * @return void
     */
    public function removeTagFromContactIdsUsingDELETE($tag_id, $ids)
    {
        list($response) = $this->removeTagFromContactIdsUsingDELETEWithHttpInfo($tag_id, $ids);
        return $response;
    }

    /**
     * Operation removeTagFromContactIdsUsingDELETEWithHttpInfo
     *
     * Remove Tag from Contacts
     *
     * @param int $tag_id tagId (required)
     * @param int[] $ids ids (required)
     * @throws \CollingMedia\Infusionsoft\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function removeTagFromContactIdsUsingDELETEWithHttpInfo($tag_id, $ids)
    {
        // verify the required parameter 'tag_id' is set
        if ($tag_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $tag_id when calling removeTagFromContactIdsUsingDELETE');
        }
        // verify the required parameter 'ids' is set
        if ($ids === null) {
            throw new \InvalidArgumentException('Missing the required parameter $ids when calling removeTagFromContactIdsUsingDELETE');
        }
        // parse inputs
        $resourcePath = "/tags/{tagId}/contacts";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if (is_array($ids)) {
            $ids = $this->apiClient->getSerializer()->serializeCollection($ids, 'multi', true);
        }
        if ($ids !== null) {
            $queryParams['ids'] = $this->apiClient->getSerializer()->toQueryValue($ids);
        }
        // path params
        if ($tag_id !== null) {
            $resourcePath = str_replace(
                "{" . "tagId" . "}",
                $this->apiClient->getSerializer()->toPathValue($tag_id),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/tags/{tagId}/contacts'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 401:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'string', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'string', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'string', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }
}
