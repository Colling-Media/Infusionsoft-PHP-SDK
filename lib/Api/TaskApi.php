<?php
/**
 * TaskApi
 * PHP version 5
 *
 * @category Class
 * @package  CollingMedia\Infusionsoft
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Infusionsoft
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: V1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace CollingMedia\Infusionsoft\Api;

use \CollingMedia\Infusionsoft\ApiClient;
use \CollingMedia\Infusionsoft\ApiException;
use \CollingMedia\Infusionsoft\Configuration;
use \CollingMedia\Infusionsoft\ObjectSerializer;

/**
 * TaskApi Class Doc Comment
 *
 * @category Class
 * @package  CollingMedia\Infusionsoft
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class TaskApi
{
    /**
     * API Client
     *
     * @var \CollingMedia\Infusionsoft\ApiClient instance of the ApiClient
     */
    protected $apiClient;

    /**
     * Constructor
     *
     * @param \CollingMedia\Infusionsoft\ApiClient|null $apiClient The api client to use
     */
    public function __construct(\CollingMedia\Infusionsoft\ApiClient $apiClient = null)
    {
        if ($apiClient === null) {
            $apiClient = new ApiClient();
        }

        $this->apiClient = $apiClient;
    }

    /**
     * Get API client
     *
     * @return \CollingMedia\Infusionsoft\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }

    /**
     * Set the API client
     *
     * @param \CollingMedia\Infusionsoft\ApiClient $apiClient set the API client
     *
     * @return TaskApi
     */
    public function setApiClient(\CollingMedia\Infusionsoft\ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }

    /**
     * Operation createTaskUsingPOST
     *
     * Create a Task
     *
     * @param \CollingMedia\Infusionsoft\Model\Task $task task (required)
     * @throws \CollingMedia\Infusionsoft\ApiException on non-2xx response
     * @return \CollingMedia\Infusionsoft\Model\InlineResponse20015Tasks
     */
    public function createTaskUsingPOST($task)
    {
        list($response) = $this->createTaskUsingPOSTWithHttpInfo($task);
        return $response;
    }

    /**
     * Operation createTaskUsingPOSTWithHttpInfo
     *
     * Create a Task
     *
     * @param \CollingMedia\Infusionsoft\Model\Task $task task (required)
     * @throws \CollingMedia\Infusionsoft\ApiException on non-2xx response
     * @return array of \CollingMedia\Infusionsoft\Model\InlineResponse20015Tasks, HTTP status code, HTTP response headers (array of strings)
     */
    public function createTaskUsingPOSTWithHttpInfo($task)
    {
        // verify the required parameter 'task' is set
        if ($task === null) {
            throw new \InvalidArgumentException('Missing the required parameter $task when calling createTaskUsingPOST');
        }
        // parse inputs
        $resourcePath = "/tasks";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // body params
        $_tempBody = null;
        if (isset($task)) {
            $_tempBody = $task;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\CollingMedia\Infusionsoft\Model\InlineResponse20015Tasks',
                '/tasks'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\CollingMedia\Infusionsoft\Model\InlineResponse20015Tasks', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\CollingMedia\Infusionsoft\Model\InlineResponse20015Tasks', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'string', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'string', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation loadTaskUsingGET
     *
     * Retrieve a Task
     *
     * @param string $task_id taskId (required)
     * @throws \CollingMedia\Infusionsoft\ApiException on non-2xx response
     * @return \CollingMedia\Infusionsoft\Model\InlineResponse20015Tasks
     */
    public function loadTaskUsingGET($task_id)
    {
        list($response) = $this->loadTaskUsingGETWithHttpInfo($task_id);
        return $response;
    }

    /**
     * Operation loadTaskUsingGETWithHttpInfo
     *
     * Retrieve a Task
     *
     * @param string $task_id taskId (required)
     * @throws \CollingMedia\Infusionsoft\ApiException on non-2xx response
     * @return array of \CollingMedia\Infusionsoft\Model\InlineResponse20015Tasks, HTTP status code, HTTP response headers (array of strings)
     */
    public function loadTaskUsingGETWithHttpInfo($task_id)
    {
        // verify the required parameter 'task_id' is set
        if ($task_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $task_id when calling loadTaskUsingGET');
        }
        // parse inputs
        $resourcePath = "/tasks/{taskId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($task_id !== null) {
            $resourcePath = str_replace(
                "{" . "taskId" . "}",
                $this->apiClient->getSerializer()->toPathValue($task_id),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\CollingMedia\Infusionsoft\Model\InlineResponse20015Tasks',
                '/tasks/{taskId}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\CollingMedia\Infusionsoft\Model\InlineResponse20015Tasks', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\CollingMedia\Infusionsoft\Model\InlineResponse20015Tasks', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'string', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'string', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'string', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation removeTaskUsingDELETE
     *
     * Delete a Task
     *
     * @param string $task_id taskId (required)
     * @throws \CollingMedia\Infusionsoft\ApiException on non-2xx response
     * @return void
     */
    public function removeTaskUsingDELETE($task_id)
    {
        list($response) = $this->removeTaskUsingDELETEWithHttpInfo($task_id);
        return $response;
    }

    /**
     * Operation removeTaskUsingDELETEWithHttpInfo
     *
     * Delete a Task
     *
     * @param string $task_id taskId (required)
     * @throws \CollingMedia\Infusionsoft\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function removeTaskUsingDELETEWithHttpInfo($task_id)
    {
        // verify the required parameter 'task_id' is set
        if ($task_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $task_id when calling removeTaskUsingDELETE');
        }
        // parse inputs
        $resourcePath = "/tasks/{taskId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($task_id !== null) {
            $resourcePath = str_replace(
                "{" . "taskId" . "}",
                $this->apiClient->getSerializer()->toPathValue($task_id),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/tasks/{taskId}'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 401:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'string', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'string', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'string', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation replaceTaskUsingPUT
     *
     * Replace a Task
     *
     * @param string $task_id taskId (required)
     * @param \CollingMedia\Infusionsoft\Model\Task1 $task task (required)
     * @throws \CollingMedia\Infusionsoft\ApiException on non-2xx response
     * @return \CollingMedia\Infusionsoft\Model\InlineResponse20015Tasks
     */
    public function replaceTaskUsingPUT($task_id, $task)
    {
        list($response) = $this->replaceTaskUsingPUTWithHttpInfo($task_id, $task);
        return $response;
    }

    /**
     * Operation replaceTaskUsingPUTWithHttpInfo
     *
     * Replace a Task
     *
     * @param string $task_id taskId (required)
     * @param \CollingMedia\Infusionsoft\Model\Task1 $task task (required)
     * @throws \CollingMedia\Infusionsoft\ApiException on non-2xx response
     * @return array of \CollingMedia\Infusionsoft\Model\InlineResponse20015Tasks, HTTP status code, HTTP response headers (array of strings)
     */
    public function replaceTaskUsingPUTWithHttpInfo($task_id, $task)
    {
        // verify the required parameter 'task_id' is set
        if ($task_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $task_id when calling replaceTaskUsingPUT');
        }
        // verify the required parameter 'task' is set
        if ($task === null) {
            throw new \InvalidArgumentException('Missing the required parameter $task when calling replaceTaskUsingPUT');
        }
        // parse inputs
        $resourcePath = "/tasks/{taskId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($task_id !== null) {
            $resourcePath = str_replace(
                "{" . "taskId" . "}",
                $this->apiClient->getSerializer()->toPathValue($task_id),
                $resourcePath
            );
        }
        // body params
        $_tempBody = null;
        if (isset($task)) {
            $_tempBody = $task;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\CollingMedia\Infusionsoft\Model\InlineResponse20015Tasks',
                '/tasks/{taskId}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\CollingMedia\Infusionsoft\Model\InlineResponse20015Tasks', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\CollingMedia\Infusionsoft\Model\InlineResponse20015Tasks', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'string', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'string', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'string', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation searchUsingGET4
     *
     * Search Tasks
     *
     * @param int $contact_id Returns tasks for the provided contact id (optional)
     * @param bool $has_due_date Returns tasks that have an &#39;action date&#39; when set to true (optional)
     * @param int $user_id Returns tasks for the provided user id (optional)
     * @param string $since Date to start searching from ex. &#x60;2017-01-01T22:17:59.039Z&#x60; (optional)
     * @param string $until Date to search to ex. &#x60;2017-01-01T22:17:59.039Z&#x60; (optional)
     * @param bool $completed Sets completed status of items to return (optional)
     * @param int $limit Sets a total of items to return (optional)
     * @param int $offset Sets a beginning range of items to return (optional)
     * @param string $order Attribute to order items by (optional)
     * @throws \CollingMedia\Infusionsoft\ApiException on non-2xx response
     * @return \CollingMedia\Infusionsoft\Model\InlineResponse20015
     */
    public function searchUsingGET4($contact_id = null, $has_due_date = null, $user_id = null, $since = null, $until = null, $completed = null, $limit = null, $offset = null, $order = null)
    {
        list($response) = $this->searchUsingGET4WithHttpInfo($contact_id, $has_due_date, $user_id, $since, $until, $completed, $limit, $offset, $order);
        return $response;
    }

    /**
     * Operation searchUsingGET4WithHttpInfo
     *
     * Search Tasks
     *
     * @param int $contact_id Returns tasks for the provided contact id (optional)
     * @param bool $has_due_date Returns tasks that have an &#39;action date&#39; when set to true (optional)
     * @param int $user_id Returns tasks for the provided user id (optional)
     * @param string $since Date to start searching from ex. &#x60;2017-01-01T22:17:59.039Z&#x60; (optional)
     * @param string $until Date to search to ex. &#x60;2017-01-01T22:17:59.039Z&#x60; (optional)
     * @param bool $completed Sets completed status of items to return (optional)
     * @param int $limit Sets a total of items to return (optional)
     * @param int $offset Sets a beginning range of items to return (optional)
     * @param string $order Attribute to order items by (optional)
     * @throws \CollingMedia\Infusionsoft\ApiException on non-2xx response
     * @return array of \CollingMedia\Infusionsoft\Model\InlineResponse20015, HTTP status code, HTTP response headers (array of strings)
     */
    public function searchUsingGET4WithHttpInfo($contact_id = null, $has_due_date = null, $user_id = null, $since = null, $until = null, $completed = null, $limit = null, $offset = null, $order = null)
    {
        // parse inputs
        $resourcePath = "/tasks/search";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if ($contact_id !== null) {
            $queryParams['contact_id'] = $this->apiClient->getSerializer()->toQueryValue($contact_id);
        }
        // query params
        if ($has_due_date !== null) {
            $queryParams['has_due_date'] = $this->apiClient->getSerializer()->toQueryValue($has_due_date);
        }
        // query params
        if ($user_id !== null) {
            $queryParams['user_id'] = $this->apiClient->getSerializer()->toQueryValue($user_id);
        }
        // query params
        if ($since !== null) {
            $queryParams['since'] = $this->apiClient->getSerializer()->toQueryValue($since);
        }
        // query params
        if ($until !== null) {
            $queryParams['until'] = $this->apiClient->getSerializer()->toQueryValue($until);
        }
        // query params
        if ($completed !== null) {
            $queryParams['completed'] = $this->apiClient->getSerializer()->toQueryValue($completed);
        }
        // query params
        if ($limit !== null) {
            $queryParams['limit'] = $this->apiClient->getSerializer()->toQueryValue($limit);
        }
        // query params
        if ($offset !== null) {
            $queryParams['offset'] = $this->apiClient->getSerializer()->toQueryValue($offset);
        }
        // query params
        if ($order !== null) {
            $queryParams['order'] = $this->apiClient->getSerializer()->toQueryValue($order);
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\CollingMedia\Infusionsoft\Model\InlineResponse20015',
                '/tasks/search'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\CollingMedia\Infusionsoft\Model\InlineResponse20015', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\CollingMedia\Infusionsoft\Model\InlineResponse20015', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'string', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'string', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'string', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation syncUsingGET2
     *
     * Retrieve Synced Tasks
     *
     * @param string $sync_token sync_token (optional)
     * @param int $limit Sets a total of items to return (optional)
     * @param int $offset Sets a beginning range of items to return (optional)
     * @throws \CollingMedia\Infusionsoft\ApiException on non-2xx response
     * @return \CollingMedia\Infusionsoft\Model\InlineResponse20016
     */
    public function syncUsingGET2($sync_token = null, $limit = null, $offset = null)
    {
        list($response) = $this->syncUsingGET2WithHttpInfo($sync_token, $limit, $offset);
        return $response;
    }

    /**
     * Operation syncUsingGET2WithHttpInfo
     *
     * Retrieve Synced Tasks
     *
     * @param string $sync_token sync_token (optional)
     * @param int $limit Sets a total of items to return (optional)
     * @param int $offset Sets a beginning range of items to return (optional)
     * @throws \CollingMedia\Infusionsoft\ApiException on non-2xx response
     * @return array of \CollingMedia\Infusionsoft\Model\InlineResponse20016, HTTP status code, HTTP response headers (array of strings)
     */
    public function syncUsingGET2WithHttpInfo($sync_token = null, $limit = null, $offset = null)
    {
        // parse inputs
        $resourcePath = "/tasks/sync";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if ($sync_token !== null) {
            $queryParams['sync_token'] = $this->apiClient->getSerializer()->toQueryValue($sync_token);
        }
        // query params
        if ($limit !== null) {
            $queryParams['limit'] = $this->apiClient->getSerializer()->toQueryValue($limit);
        }
        // query params
        if ($offset !== null) {
            $queryParams['offset'] = $this->apiClient->getSerializer()->toQueryValue($offset);
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\CollingMedia\Infusionsoft\Model\InlineResponse20016',
                '/tasks/sync'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\CollingMedia\Infusionsoft\Model\InlineResponse20016', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\CollingMedia\Infusionsoft\Model\InlineResponse20016', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'string', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'string', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'string', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation tasksUsingGET
     *
     * List Tasks
     *
     * @param int $contact_id contact_id (optional)
     * @param bool $has_due_date has_due_date (optional)
     * @param int $user_id user_id (optional)
     * @param string $since Date to start searching from ex. &#x60;2017-01-01T22:17:59.039Z&#x60; (optional)
     * @param string $until Date to search to ex. &#x60;2017-01-01T22:17:59.039Z&#x60; (optional)
     * @param bool $completed Sets completed status of items to return (optional)
     * @param int $limit Sets a total of items to return (optional)
     * @param int $offset Sets a beginning range of items to return (optional)
     * @param string $order Attribute to order items by (optional)
     * @throws \CollingMedia\Infusionsoft\ApiException on non-2xx response
     * @return \CollingMedia\Infusionsoft\Model\InlineResponse20015
     */
    public function tasksUsingGET($contact_id = null, $has_due_date = null, $user_id = null, $since = null, $until = null, $completed = null, $limit = null, $offset = null, $order = null)
    {
        list($response) = $this->tasksUsingGETWithHttpInfo($contact_id, $has_due_date, $user_id, $since, $until, $completed, $limit, $offset, $order);
        return $response;
    }

    /**
     * Operation tasksUsingGETWithHttpInfo
     *
     * List Tasks
     *
     * @param int $contact_id contact_id (optional)
     * @param bool $has_due_date has_due_date (optional)
     * @param int $user_id user_id (optional)
     * @param string $since Date to start searching from ex. &#x60;2017-01-01T22:17:59.039Z&#x60; (optional)
     * @param string $until Date to search to ex. &#x60;2017-01-01T22:17:59.039Z&#x60; (optional)
     * @param bool $completed Sets completed status of items to return (optional)
     * @param int $limit Sets a total of items to return (optional)
     * @param int $offset Sets a beginning range of items to return (optional)
     * @param string $order Attribute to order items by (optional)
     * @throws \CollingMedia\Infusionsoft\ApiException on non-2xx response
     * @return array of \CollingMedia\Infusionsoft\Model\InlineResponse20015, HTTP status code, HTTP response headers (array of strings)
     */
    public function tasksUsingGETWithHttpInfo($contact_id = null, $has_due_date = null, $user_id = null, $since = null, $until = null, $completed = null, $limit = null, $offset = null, $order = null)
    {
        // parse inputs
        $resourcePath = "/tasks";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if ($contact_id !== null) {
            $queryParams['contact_id'] = $this->apiClient->getSerializer()->toQueryValue($contact_id);
        }
        // query params
        if ($has_due_date !== null) {
            $queryParams['has_due_date'] = $this->apiClient->getSerializer()->toQueryValue($has_due_date);
        }
        // query params
        if ($user_id !== null) {
            $queryParams['user_id'] = $this->apiClient->getSerializer()->toQueryValue($user_id);
        }
        // query params
        if ($since !== null) {
            $queryParams['since'] = $this->apiClient->getSerializer()->toQueryValue($since);
        }
        // query params
        if ($until !== null) {
            $queryParams['until'] = $this->apiClient->getSerializer()->toQueryValue($until);
        }
        // query params
        if ($completed !== null) {
            $queryParams['completed'] = $this->apiClient->getSerializer()->toQueryValue($completed);
        }
        // query params
        if ($limit !== null) {
            $queryParams['limit'] = $this->apiClient->getSerializer()->toQueryValue($limit);
        }
        // query params
        if ($offset !== null) {
            $queryParams['offset'] = $this->apiClient->getSerializer()->toQueryValue($offset);
        }
        // query params
        if ($order !== null) {
            $queryParams['order'] = $this->apiClient->getSerializer()->toQueryValue($order);
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\CollingMedia\Infusionsoft\Model\InlineResponse20015',
                '/tasks'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\CollingMedia\Infusionsoft\Model\InlineResponse20015', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\CollingMedia\Infusionsoft\Model\InlineResponse20015', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'string', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'string', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'string', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation updateTaskUsingPATCH
     *
     * Update a Task
     *
     * @param string $task_id taskId (required)
     * @param \CollingMedia\Infusionsoft\Model\Task2 $task task (required)
     * @throws \CollingMedia\Infusionsoft\ApiException on non-2xx response
     * @return \CollingMedia\Infusionsoft\Model\InlineResponse20015Tasks
     */
    public function updateTaskUsingPATCH($task_id, $task)
    {
        list($response) = $this->updateTaskUsingPATCHWithHttpInfo($task_id, $task);
        return $response;
    }

    /**
     * Operation updateTaskUsingPATCHWithHttpInfo
     *
     * Update a Task
     *
     * @param string $task_id taskId (required)
     * @param \CollingMedia\Infusionsoft\Model\Task2 $task task (required)
     * @throws \CollingMedia\Infusionsoft\ApiException on non-2xx response
     * @return array of \CollingMedia\Infusionsoft\Model\InlineResponse20015Tasks, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateTaskUsingPATCHWithHttpInfo($task_id, $task)
    {
        // verify the required parameter 'task_id' is set
        if ($task_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $task_id when calling updateTaskUsingPATCH');
        }
        // verify the required parameter 'task' is set
        if ($task === null) {
            throw new \InvalidArgumentException('Missing the required parameter $task when calling updateTaskUsingPATCH');
        }
        // parse inputs
        $resourcePath = "/tasks/{taskId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($task_id !== null) {
            $resourcePath = str_replace(
                "{" . "taskId" . "}",
                $this->apiClient->getSerializer()->toPathValue($task_id),
                $resourcePath
            );
        }
        // body params
        $_tempBody = null;
        if (isset($task)) {
            $_tempBody = $task;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PATCH',
                $queryParams,
                $httpBody,
                $headerParams,
                '\CollingMedia\Infusionsoft\Model\InlineResponse20015Tasks',
                '/tasks/{taskId}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\CollingMedia\Infusionsoft\Model\InlineResponse20015Tasks', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\CollingMedia\Infusionsoft\Model\InlineResponse20015Tasks', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'string', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'string', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'string', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }
}
